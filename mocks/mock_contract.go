// Code generated by MockGen. DO NOT EDIT.
// Source: fabric/web (interfaces: ContractInt)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContractInt is a mock of ContractInt interface.
type MockContractInt struct {
	ctrl     *gomock.Controller
	recorder *MockContractIntMockRecorder
}

// MockContractIntMockRecorder is the mock recorder for MockContractInt.
type MockContractIntMockRecorder struct {
	mock *MockContractInt
}

// NewMockContractInt creates a new mock instance.
func NewMockContractInt(ctrl *gomock.Controller) *MockContractInt {
	mock := &MockContractInt{ctrl: ctrl}
	mock.recorder = &MockContractIntMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractInt) EXPECT() *MockContractIntMockRecorder {
	return m.recorder
}

// EvaluateTransaction mocks base method.
func (m *MockContractInt) EvaluateTransaction(arg0 string, arg1 ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvaluateTransaction", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvaluateTransaction indicates an expected call of EvaluateTransaction.
func (mr *MockContractIntMockRecorder) EvaluateTransaction(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateTransaction", reflect.TypeOf((*MockContractInt)(nil).EvaluateTransaction), varargs...)
}
