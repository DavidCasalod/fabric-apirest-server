// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package fabric is a generated GoMock package.
package fabric

// import (
// 	reflect "reflect"

// 	gomock "github.com/golang/mock/gomock"
// 	client "github.com/hyperledger/fabric-gateway/pkg/client"
// 	grpc "google.golang.org/grpc"
// )

// // MockProposalInt is a mock of ProposalInt interface.
// type MockProposalInt struct {
// 	ctrl     *gomock.Controller
// 	recorder *MockProposalIntMockRecorder
// }

// // MockProposalIntMockRecorder is the mock recorder for MockProposalInt.
// type MockProposalIntMockRecorder struct {
// 	mock *MockProposalInt
// }

// // NewMockProposalInt creates a new mock instance.
// func NewMockProposalInt(ctrl *gomock.Controller) *MockProposalInt {
// 	mock := &MockProposalInt{ctrl: ctrl}
// 	mock.recorder = &MockProposalIntMockRecorder{mock}
// 	return mock
// }

// // EXPECT returns an object that allows the caller to indicate expected use.
// func (m *MockProposalInt) EXPECT() *MockProposalIntMockRecorder {
// 	return m.recorder
// }

// // Endorse mocks base method.
// func (m *MockProposalInt) Endorse(opts ...grpc.CallOption) (*client.Transaction, error) {
// 	m.ctrl.T.Helper()
// 	varargs := []interface{}{}
// 	for _, a := range opts {
// 		varargs = append(varargs, a)
// 	}
// 	ret := m.ctrl.Call(m, "Endorse", varargs...)
// 	ret0, _ := ret[0].(*client.Transaction)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // Endorse indicates an expected call of Endorse.
// func (mr *MockProposalIntMockRecorder) Endorse(opts ...interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endorse", reflect.TypeOf((*MockProposalInt)(nil).Endorse), opts...)
// }

// // Submit mocks base method.
// func (m *MockProposalInt) Submit(opts ...grpc.CallOption) (*client.Commit, error) {
// 	m.ctrl.T.Helper()
// 	varargs := []interface{}{}
// 	for _, a := range opts {
// 		varargs = append(varargs, a)
// 	}
// 	ret := m.ctrl.Call(m, "Submit", varargs...)
// 	ret0, _ := ret[0].(*client.Commit)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // Submit indicates an expected call of Submit.
// func (mr *MockProposalIntMockRecorder) Submit(opts ...interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockProposalInt)(nil).Submit), opts...)
// }

// // MockContractInt is a mock of ContractInt interface.
// type MockContractInt struct {
// 	ctrl     *gomock.Controller
// 	recorder *MockContractIntMockRecorder
// }

// // MockContractIntMockRecorder is the mock recorder for MockContractInt.
// type MockContractIntMockRecorder struct {
// 	mock *MockContractInt
// }

// // NewMockContractInt creates a new mock instance.
// func NewMockContractInt(ctrl *gomock.Controller) *MockContractInt {
// 	mock := &MockContractInt{ctrl: ctrl}
// 	mock.recorder = &MockContractIntMockRecorder{mock}
// 	return mock
// }

// // EXPECT returns an object that allows the caller to indicate expected use.
// func (m *MockContractInt) EXPECT() *MockContractIntMockRecorder {
// 	return m.recorder
// }

// // EvaluateTransaction mocks base method.
// func (m *MockContractInt) EvaluateTransaction(name string, args ...string) ([]byte, error) {
// 	m.ctrl.T.Helper()
// 	varargs := []interface{}{name}
// 	for _, a := range args {
// 		varargs = append(varargs, a)
// 	}
// 	ret := m.ctrl.Call(m, "EvaluateTransaction", varargs...)
// 	ret0, _ := ret[0].([]byte)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // EvaluateTransaction indicates an expected call of EvaluateTransaction.
// func (mr *MockContractIntMockRecorder) EvaluateTransaction(name interface{}, args ...interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	varargs := append([]interface{}{name}, args...)
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluateTransaction", reflect.TypeOf((*MockContractInt)(nil).EvaluateTransaction), varargs...)
// }

// // NewProposal mocks base method.
// func (m *MockContractInt) NewProposal(transactionName string, options ...func([][]byte) error) (*client.Proposal, error) {
// 	m.ctrl.T.Helper()
// 	varargs := []interface{}{transactionName}
// 	for _, a := range options {
// 		varargs = append(varargs, a)
// 	}
// 	ret := m.ctrl.Call(m, "NewProposal", varargs...)
// 	ret0, _ := ret[0].(*client.Proposal)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }

// // NewProposal indicates an expected call of NewProposal.
// func (mr *MockContractIntMockRecorder) NewProposal(transactionName interface{}, options ...interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	varargs := append([]interface{}{transactionName}, options...)
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProposal", reflect.TypeOf((*MockContractInt)(nil).NewProposal), varargs...)
// }

// // MockNetworkInt is a mock of NetworkInt interface.
// type MockNetworkInt struct {
// 	ctrl     *gomock.Controller
// 	recorder *MockNetworkIntMockRecorder
// }

// // MockNetworkIntMockRecorder is the mock recorder for MockNetworkInt.
// type MockNetworkIntMockRecorder struct {
// 	mock *MockNetworkInt
// }

// // NewMockNetworkInt creates a new mock instance.
// func NewMockNetworkInt(ctrl *gomock.Controller) *MockNetworkInt {
// 	mock := &MockNetworkInt{ctrl: ctrl}
// 	mock.recorder = &MockNetworkIntMockRecorder{mock}
// 	return mock
// }

// // EXPECT returns an object that allows the caller to indicate expected use.
// func (m *MockNetworkInt) EXPECT() *MockNetworkIntMockRecorder {
// 	return m.recorder
// }

// // GetContract mocks base method.
// func (m *MockNetworkInt) GetContract(chaincodeName string) ContractInt {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "GetContract", chaincodeName)
// 	ret0, _ := ret[0].(ContractInt)
// 	return ret0
// }

// // GetContract indicates an expected call of GetContract.
// func (mr *MockNetworkIntMockRecorder) GetContract(chaincodeName interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockNetworkInt)(nil).GetContract), chaincodeName)
// }

// // MockGatewayInt is a mock of GatewayInt interface.
// type MockGatewayInt struct {
// 	ctrl     *gomock.Controller
// 	recorder *MockGatewayIntMockRecorder
// }

// // MockGatewayIntMockRecorder is the mock recorder for MockGatewayInt.
// type MockGatewayIntMockRecorder struct {
// 	mock *MockGatewayInt
// }

// // NewMockGatewayInt creates a new mock instance.
// func NewMockGatewayInt(ctrl *gomock.Controller) *MockGatewayInt {
// 	mock := &MockGatewayInt{ctrl: ctrl}
// 	mock.recorder = &MockGatewayIntMockRecorder{mock}
// 	return mock
// }

// // EXPECT returns an object that allows the caller to indicate expected use.
// func (m *MockGatewayInt) EXPECT() *MockGatewayIntMockRecorder {
// 	return m.recorder
// }

// // GetNetwork mocks base method.
// func (m *MockGatewayInt) GetNetwork(name string) NetworkInt {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "GetNetwork", name)
// 	ret0, _ := ret[0].(NetworkInt)
// 	return ret0
// }

// // GetNetwork indicates an expected call of GetNetwork.
// func (mr *MockGatewayIntMockRecorder) GetNetwork(name interface{}) *gomock.Call {
// 	mr.mock.ctrl.T.Helper()
// 	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockGatewayInt)(nil).GetNetwork), name)
// }
